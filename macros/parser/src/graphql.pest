/*
Built with love and the hope that you'll use this software for good by d3bate.

This file is distributed subject to the terms of the Mozilla Public License (2.0).
A copy of the license can be found at the root of this Git repository.

This file contains a GraphQL parser, which should conform to the GraphQL spec.
The exact spec used can be found at https://web.archive.org/web/20200721161858/http://spec.graphql.org/draft/

PRs to bring it up to date if the spec changes are welcome.
*/

WHITESPACE = _{ " " | NEWLINE }

name = @{(ASCII_ALPHA | "_") ~ (ASCII_ALPHA | ASCII_DIGIT | "_")+?}

triple_quotes = {QUOTATION_MARK ~ QUOTATION_MARK ~ QUOTATION_MARK}

document = {definition+}
definition = { type_system_definition | executable_definition | type_system_extension}
executable_definition = {operation_definition | fragment_definition}
operation_definition = {operation_type ~ name? ~ variable_definitions? ~ directives? ~ selection_set}
operation_type = {"query" | "mutation" | "subscription"}
selection_set = { "{" ~ selection+ ~ "}" }
selection = {field | fragment_spread | inline_fragment}
field = {alias? ~ name ~ arguments? ~ directives? ~ selection_set?}
arguments = {"(" ~ (argument ~ ","?)+ ~ ")"}
// ^^ not sure about the comma above
argument = { name ~ ":" ~ value }
alias = { name ~ ":" }
fragment_spread = {"..."  ~ fragment_name ~ directives? }
fragment_definition = {"fragment" ~ fragment_name ~ type_condition ~ directives? ~ selection_set}
fragment_name = {name}
type_condition = {"on" ~ named_type}
inline_fragment = {type_condition? ~ directives? ~ selection_set}

/* Values */
value = {variable
         | int_value
         | float_value
         | string_value
         | boolean_value
         | null_value
         | enum_value
         | list_value
         | object_value}

int_value = {integer_part}
integer_part = {negative_sign? ~ "0" | negative_sign? ~ ASCII_NONZERO_DIGIT ~ ASCII_DIGIT+? }
negative_sign = {"-"}

float_value = {integer_part ~ fractional_part ~ exponent_part
                | integer_part ~ fractional_part
                | integer_part ~ exponent_part}
fractional_part = {"." ~ ASCII_DIGIT+}
exponent_part = {exponent_indicator ~ sign? ~ ASCII_DIGIT}
exponent_indicator = {"e" | "E"}
sign = {"+" | "-"}

boolean_value = {"true" | "false"}

string_value = {QUOTATION_MARK ~ string_character+ ~ QUOTATION_MARK
                | !(triple_quotes) ~ QUOTATION_MARK ~ QUOTATION_MARK
                | triple_quotes ~
                block_string_character+?
                ~ triple_quotes}
string_character = {!(QUOTATION_MARK | "\\" | "\n" ) ~ ASCII+
                    | "\\u" ~ escaped_unicode
                    | "\\" ~ escaped_character}
escaped_unicode = {"/" ~ ('0'..'9' | 'A'..'F' | 'a'..'f') ~ "/"}
escaped_character = {QUOTATION_MARK ~ "\\" ~ "/" ~ "b" ~ "f" ~ "n" ~ "r" ~ "t"}
block_string_character = {!(triple_quotes | "\\" ~ triple_quotes ~ "\\" ~ triple_quotes) ~ ASCII}

null_value = {"null"}

enum_value = {!(boolean_value | null_value) ~ name}

list_value = {"[" ~ "]" | "[" ~ value ~ ("," ~ value)? ~ "]"}

object_value = { "{" ~ object_field+ ~ "}" | "{" ~ "}" }
object_field = { name ~ ":" ~ value }

/* Variables */
variable = @{"$" ~ name}
variable_definitions = {"(" ~ variable_definition+ ~ ")"}
variable_definition={variable ~ ":" ~ graphql_type ~ default_value? ~ directives?}
default_value={value}

graphql_type = { non_null_type | named_type | list_type}
named_type = {name}
list_type = {"[" ~ graphql_type ~ "]"}
non_null_type = { (named_type ~ "!") | (list_type ~ "!")}

directives = {directive+}
directive = {"@" ~ name ~ arguments?}

/* Type system definition */
type_system_definition = {schema_definition | type_definition | directive_definition}
type_system_extension = {schema_extension | type_extension}

description = {string_value}

schema_definition = {description? ~ "schema" ~ directives? ~ "{" ~ root_operation_type_definition+ ~ "}"}
root_operation_type_definition = {operation_type ~ ":" ~ named_type}

schema_extension = {"extend schema" ~ directives? ~ root_operation_type_definition+
                    | "extend schema" ~ directives}

type_definition = {scalar_type_definition
                    | object_type_definition
                    | interface_type_definition
                    | union_type_definition
                    | enum_type_definition
                    | input_object_type_definition}

type_extension = {scalar_type_extension
                    | object_type_extension
                    | interface_type_extension
                    | union_type_extension
                    | enum_type_extension
                    | input_object_type_extension}

scalar_type_definition = {description? ~ "scalar" ~ name ~ directives?}
scalar_type_extension = {"extend scalar" ~ name ~ directives}

object_type_definition = {description? ~ "type" ~ name ~ implements_interfaces? ~ directives? ~ fields_definition?}
implements_interfaces = {"implements &"? ~ named_type ~ ("&" ~ named_type)*}
fields_definition = {"{" ~ field_definition+ ~ "}"}
field_definition = {description? ~ name ~ arguments_definition? ~ ":" ~ graphql_type ~ directives?}

arguments_definition = {"(" ~ input_value_definition+ ~ ")"}
input_value_definition={description? ~ name ~ ":" ~ graphql_type ~ default_value? ~ directives?}

object_type_extension = {"extend type" ~ name ~ implements_interfaces? ~ directives? ~ fields_definition
                     | "extend type" ~ name ~ implements_interfaces? ~ directives
                     | "extend type" ~ name ~ implements_interfaces}

interface_type_definition = {description? ~ "interface" ~ name ~ implements_interfaces? ~ directives? ~ fields_definition?}
interface_type_extension = {"extend interface" ~ name ~ implements_interfaces? ~ directives? ~ fields_definition
                        | "extend interface" ~ name ~ implements_interfaces? ~ directives
                        | "extend interface" ~ name ~ implements_interfaces}

union_type_definition = {description? ~ "union" ~ name ~ directives? ~ union_member_types?}
union_member_types = {"=" ~ "|"? ~ named_type ~ ("|" ~ named_type)*}
union_type_extension = {"extend union" ~ name ~ directives? ~ union_member_types
                        | "extend union" ~ name ~ directives}

enum_type_definition = {description? ~ "enum" ~ name ~ directives? ~ enum_values_definition? }
enum_values_definition = {enum_value_definition+}
enum_value_definition = {description? ~ enum_value ~ directives?}
enum_type_extension = {"extend enum" ~ name ~ directives? ~ enum_values_definition
                        | "extend enum" ~ name ~ directives}

input_object_type_definition = {description? ~ "input" ~ name ~ directives? ~ input_fields_definition?}
input_fields_definition = {input_value_definition+}
input_object_type_extension = {"extend input" ~ name ~ directives? ~ input_fields_definition
                                | "extend input " ~ name ~ directives}

directive_definition = {description? ~ "directive @" ~ name ~ arguments_definition? ~ repeatable? ~ "on" ~ directive_locations}

repeatable = {"repeatable"}

directive_locations = {("|" ~ directive_location)+
                        | "|"? ~ directive_location}
directive_location = {executable_directive_location | type_system_directive_location}
executable_directive_location={"QUERY"
                               | "MUTATION"
                               | "SUBSCRIPTION"
                               | "FIELD"
                               | "FRAGMENT_DEFINITION"
                               | "FRAGMENT_SPREAD"
                               | "INLINE_FRAGMENT"
                               | "VARIABLE_DEFINITION"
                               }
type_system_directive_location={"SCHEMA"
                                | "SCALAR"
                                | "OBJECT"
                                | "FIELD_DEFINITION"
                                | "ARGUMENT_DESCRIPTION"
                                | "INTERFACE"
                                | "UNION"
                                | "ENUM"
                                | "ENUM_VALUE"
                                | "INPUT_VALUE"
                                | "INPUT_OBJECT"
                                | "INPUT_FIELD_DEFINITION"
                                }
